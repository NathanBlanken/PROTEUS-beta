%% Rayleigh-Plesset solver
% Simulates the acoustic response of a microbubble. The bubble responses is 
% computed with a Marmottant-type Rayleigh-Plesset equation, which takes 
% viscous, radiation, shell, and thermal damping into account. The pulse 
% shape is based on the pulse from the P4-1 transducer.
%
% Nathan Blanken, University of Twente, 2021

clear; clc; close all

dispFig = true;             % Display figures
dispProgress = true;    	% Show ODE solver progress

% Add the functions folder to path
addpath './functions'

% Get the transducer transfer functions of the P4-1 transducer
T = load('TransmitTransferFunctionFit.mat');

%% Pulse properties
PA = 200e3;                 % Acoustic pressure amplitude (Pa)
Ncy = 1;                    % Total number of cycles
f = 1.7e6;              	% Centre frequency (Hz)
Fs = T.Fs;              	% Simulation sampling rate (Hz)
Tresp = 4e-6;               % Echo receive time after pulse (s)

% Simulate the pulse generated by a transducer with transfer function T,
% resulting from a three-level driving signal:
pulse = getPulse(f,Ncy,PA,Fs,Tresp,dispFig,T.Tfit);
pulse.tq = pulse.t; % Query times for ODE solver

% Show progress of bubble oscillation solver:
pulse.dispProgress = dispProgress;

%% Material properties and environmental conditions
[liquid, gas] = getMaterialProperties();

% Select a thermal model: 'Adiabatic', 'Isothermal', or 'Propsperetti':
liquid.ThermalModel = 'Prosperetti';

%% Microbubble and shell properties
bubble.R0 = 2.14e-6;        % Bubble radius (m)
bubble.r0 = 0.01;           % Distance bubble to pressure sensor (m)

shell.model = 'Segers';     % Marmottant, Segers, or SegersTable

% Typical value intial surface tension: Sijl et al., J. Acoust. Soc. Am.,
% 129, 1729 (2011)
shell.sig_0 = 10e-3;        % Equilibrium surface tension bubble (N/m);
shell = getShellProperties(bubble,shell,liquid);

%% Bubble response

% Compute the radial response
[response, eqparam] = calcBubbleResponse(liquid, ...
    gas, shell, bubble, pulse);

% Compute the scattered pressure
nearfield = false;    % Do not compute the rapidly decaying r^(-3) term.
scatter = calc_scatter(response,liquid,bubble,pulse,nearfield);

% Plot the results
plot_results(response,scatter,pulse.f,dispFig)

%% Clear variables
pulse = rmfield(pulse,'dispProgress');
clear dispFig dispProgress nearfield
clear invertedPulse Nenv Ncy PA f Fs Tresp Hfit T 

